
//1.  prvi bit slijeva (15. u hdl) oznacava predznak broja (1-negativan, 0-pozitivan)
//    mnozenjem dva negativna broja (1 i 1) dobivamo pozitivan broj (0), kao i mnozenje dva pozitivna broja (0 i 0 daju 0)
//    mnozenjem pozitivnog i negativnog broja (1 i 0 ili 0 i 1) dobivamo negativan broj (1)
//	  zato za taj prvi (tj 15.bit) koristitimo Xor 

//2. iducih pet bitova (10..14) oznacava eksponent svakog broja, no u zapisu na binarni eksponent dodajemo binarni broj 15, 01111
//   (u zapisu 32-bitna broja dodajemo 2^7 - 1 = 127, a ovdje 2^4 - 1 = 15)
//   npr, ako je binarni eksponent nekog broja 4, dodamo 15 i broj 19 u binarnom zapisu zapisemo u tih 5 bitova (10..14)
//   mnozenjem dva broja eksponenti se zbrajaju, no uocimo da smo onda dvaput zbrojili tih 15, npr (a+15)+(b+15)=(a+b+30), a nama
//   treba (a+b+15) pa moramo oduzeti 15
//   to napravimo na nacin da dobiveno rjesenje zbrojimo s dvojnim komplementom broja 15, 10001 (to je zapis b u drugom Add16)
//   buduci da Add16 zbraja 16-bitne brojeve, a mi moramo zbrojiti samo 10..14 bitove, ostale bitove samo postavimo na False i u 
//   outu ih ne gledamo kao dio rjesenja (stavimo da su empty)

//3. na kraju pomnozimo mantise (0..9 bitovi), ali za out uzimamo 6..15 jer uzimamo prvih 10 bitova pomnozenog broja
//    (s 15.bitom zapocinje broj), a ne zadnjih 10


CHIP MultHalf{
	IN a[16], b[16];
	OUT out[16];
	
	PARTS:
	Xor(a=a[15], b=b[15], out=out[15]);
	
	Add16(a[10..14]=a[10..14], b[10..14]=b[10..14], a[0..9]=false, a[15]=false, b[0..9]=false, b[15]=false,
          out=prvo);
	Add16(a=prvo, b[0..9]=false, b[10]=true, b[11..13]=false, b[14]=true, b[15]=false,
          out[10..14]=out[10..14], out[15]=empty1, out[0..9]=empty2);
	
	
	Mult(a[0..9]=a[0..9], b[0..9]=b[0..9], a[10..15]=false, b[10..15]=false, out[6..15]=out[0..9], out[0..5]=empty3);
}
