class Snake {
	// igra u kojoj se nalazi zmija
	field SnakeGame game;
	
	// X/Y pozicija zmijine glave
	field int headX, headY;

	// duljina zmije
	field int length;

	// container za koordinate zmijinih bodypartova
	field Container container;

	// smjer u kojem se krece zmija: 1=up, 2=down, 3=left, 4=right
	field int direction;

	// hrana koju zmija jede
	field RandomFood food;

	// konstruktor za ovu klasu
	constructor Snake new(SnakeGame gameS, int xS, int yS, int lenS, RandomFood foodS) {
		let game = gameS;
		let headX = xS;
		let headY = yS;
		let length = lenS;
		let container = Container.new(headX, headY);
		do drawBodyPart(headX, headY);
		do InitialSnake();
		let direction = 4;	// right
		let food = foodS;
		do placeFood();
		do food.createFood();
		return this;
	}

	// dispose metoda
	method void dispose(){
		do container.dispose();
		do Memory.deAlloc(this);
		return;
	}

	// getter metode
    	method int getHeadX() {		return headX;	}
	method int getHeadY() {		return headY;	}
    	method int getLength() {	return length;	}
	method int getDirection() {	return direction;	}
	method Container getContainer() {	return container;	}

	
	// povecaj length
	method void incLength() {
		let length = length + 1;
		return;
	}

	// postavi novi smjer
	method void setNewDirection(int newd) {
		let direction = newd;
		return;
	}

	// nacrtaj bodypart zmije
    	method void drawBodyPart(int xS, int yS) {
        	do Screen.setColor(true);
        	do Screen.drawRectangle(xS, yS, xS + 7, yS + 7);
        	return;
    	}

	// obrisi bodypart zmije
	method void eraseBodyPart(int xS, int yS) {
		do Screen.setColor(false);
		do Screen.drawRectangle(xS, yS, xS + 7, yS + 7);
		return;
	}

	// pocetna zmija
	method void InitialSnake() {
		var int i;
		let i = 1;
		while (i < length) {
			let headX = headX + 8;
			do drawBodyPart(headX, headY);
			do container.push(headX, headY);
			let i = i + 1;
		}
		return;
	}

	// kretnje zmije na zaslonu i u container parovima koordinata
	method void draw_Set_Move() {
		var PairListXY curHead;
		var int x, y;
		var PairListXY h;
		let curHead = container.getHead();
		let x = curHead.getX();
		let y = curHead.getY();
		do container.newHeadTail(headX, headY);
		if (length = container.getSize()) {
			// zmija nije pojela hranu
			do eraseBodyPart(x, y);
		}
		else {
			// zmija je pojela hranu (length se povecao za 1)
			do container.incSize();
			let h = PairListXY.new(x, y);
			do container.setHead(h);
		}
		do drawBodyPart(headX, headY);	
		return;
	}
	
	// kretnje zmije sto se tice smjera u kojem ide
	method void move() {
		// up
		if (direction = 1) {	let headY = headY - 8;	}

		// down
		if (direction = 2) {	let headY = headY + 8;	}

		// left
		if (direction = 3) {	let headX = headX - 8;	}

		// right
		if (direction = 4) {	let headX = headX + 8;	}
		
		return;
	}

	// prekinuti igru ako se zmija zabije u rub ili u samu sebe
	method boolean gameOver() {
		var boolean b;
		let b = ((headX < 0) | (headX > 504) | (headY < 0) | (headY > 232) | (container.doubleElement()));
		return b;
	}

	// pozicija hrane
	method void placeFood() {
		var boolean occupied;
		var int x, y;
		let occupied = false;
		while(~occupied) {
			do food.calcSeed();
			let x = food.randNext(2153, 512, 64);
			let x = x * 8;
			let y = food.randNext(2437, 240, 30);
			let y = y * 8;
			if (~container.contains(x,y)) {	
				let occupied = true;
			}
			else {	do food.setSeed();	}
		}
		do food.setX(x);
		do food.setY(y); 
		return;
	}

	// jedenje hrane
	method boolean eatFood() {
		if ((headX = food.getX()) & (headY = food.getY())) {
			do incLength();
			return true;
		}
		return false;
	}
}