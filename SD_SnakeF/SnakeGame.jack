/* the Snake game-screen:
   	regular screen => 512(x) x 256(y) piksela
   	jedna celija => 8(x) x 8(y) piksela
   	game-screen => 64(x) x 32(y) piksela (512/8 x 256/8)
   	tekst => 64(x) x 23(y) znakova teksta
   - donjih 16 piksela ostavljamo za tekst (sto zapravo znaci da imamo 512 x 240), to je ingame tekst
   - na pocetku imamo tekst kojim odabiremo tezinu koja utjece na bodovanje i brzinu
     kretanja zmije */

class SnakeGame {

	// zmija u igri
    	field Snake snake;

    	// rezultat
    	field int score;

    	// tezina igre
    	field int level;

	// brzina odvijanja igre
	field int speed;

	// hrana
	field RandomFood food;

    	// konstruktor za ovu klasu
    	constructor SnakeGame new() {
		do startScreen();
		let level = 1;
		let food = RandomFood.new(0);
		do chooseLevel();
		let snake = Snake.new(this, (512 / 2) - 80, (256 / 2), 10, food);
        	let score = 0;
		do setSpeed();
        	return this;

    	}

    	// dispose metoda
    	method void dispose() {
      	do snake.dispose();
		do food.dispose();
        	do Memory.deAlloc(this);
        	return;
	}

    	// getter metode
    	method Snake getSnake() {	return snake;	}
	method RandomFood getFood() {	return food;	}
    	method int getScore() {		return score;	}
	method int getLevel() {		return level;	}
	method int getSpeed() {		return speed;	}

	// pocetni zaslon
	method void startScreen(){
		var int cnt;
		var String s;

		do Output.moveCursor(2,28);
		let s = "SNAKE";
		do Output.printString(s);
		do s.dispose();

		let cnt = 0;
		while(cnt < 5){
			do Output.moveCursor(cnt*2 + 6, 10);
			let s = "Choose <<<Level ";
			do Output.printString(s);
			do s.dispose();
			let cnt = cnt + 1;
			do Output.printInt(cnt);
			let s = ">>>";
			do Output.printString(s);
			do s.dispose();
		}

		
		do Output.moveCursor(18, 4);
		let s = "Use the arrow keys to move, press 'P' to pause the game";
		do Output.printString(s);
		do s.dispose();
		
		do Screen.setColor(true);
		do Screen.drawRectangle(40,67,48,75);
		
		do Screen.drawRectangle(260,172,324,180);
		do Screen.drawRectangle(316,140,324,172);
		do Screen.drawRectangle(292,140,316,148);
		do Screen.drawRectangle(292,68,300,140);
		do Screen.drawRectangle(300,68,364,76);
		do Screen.drawRectangle(356,76,364,164);
		do Screen.drawRectangle(364,156,396,164);
		do Screen.drawRectangle(388,108,396,156);
		do Screen.drawRectangle(396,108,436,116);
		do Screen.drawRectangle(436,112,442,113);
		do Screen.drawRectangle(443,110,444,111);
		do Screen.drawRectangle(443,114,444,115);
		do Screen.drawRectangle(460,108,468,116);

		do Screen.setColor(false);
		do Screen.drawRectangle(433,109,434,110);
		do Screen.drawRectangle(433,114,434,115);
		
		return;
	}

	// biranje levela
	method void chooseLevel(){
		// UP = 131, DOWN = 133
		var int key;

		// petlja dok ne odaberemo tezinu igre
		var boolean enter;
		let enter = false;

		while(~enter){
			let key = Keyboard.keyPressed();
			do food.calcSeed();
			// spustanje, DOWN strelica
			if (key = 133){
				do Screen.setColor(false);
				do Screen.drawRectangle(40, 67 + (22 * (level - 1)), 48, 75 + (22 * (level - 1)));
				
				let level = level + 1;
				if (level = 6) {	let level = 1;	}
				
				do Screen.setColor(true);
				do Screen.drawRectangle(40, 67 + (22 * (level - 1)), 48, 75 + (22 * (level - 1)));
				do Sys.wait(250);	
			}
			
			// dizanje, UP strelica
			if (key = 131){
				do Screen.setColor(false);
				do Screen.drawRectangle(40, 67 + (22 * (level - 1)), 48, 75 + (22 * (level - 1)));
				
				let level = level - 1;
				if (level = 0) {	let level = 5;	}
				
				do Screen.setColor(true);
				do Screen.drawRectangle(40, 67 + (22 * (level - 1)), 48, 75 + (22 * (level - 1)));
				do Sys.wait(250);
			}
			
			// potvrdimo enterom odabir
			if (key = 128) {
				do Screen.clearScreen(); 
				let enter = true;
				do Sys.wait(250);
			}
		}
		do Screen.setColor(true);
        	do Screen.drawLine(0, 240, 511, 240);
		return;
	}

	// gameplay kada se odabere level
	method void gameplay(){
		var int key;
		var boolean exit, paused, broken, newExit;
		var String s;
		let exit = false;
		let paused = false;
		let newExit = false;
		do showStatus();
		
		while(~exit) {
			if(paused) {
                		let broken = false;
                		while(~broken) {
                    		let key = 0;	// inace bi pamtio da je key = 80
                    		while(~key) {
                        		let key = Keyboard.keyPressed();
                    		}
                    		if(key = 80) {
                        		// p
                        		let broken = true;
                        		let paused = false;
                    		}
                    		do Sys.wait(150);
                		}
            	}
			
			let key = Keyboard.keyPressed();
			do food.calcSeed();

			// UP strelica, validna ako idemo lijevo ili desno
			if (key = 131) {
				if ((snake.getDirection() = 3) | (snake.getDirection() = 4)) {	do snake.setNewDirection(1);	}
			}

			// DOWN strelica, validna ako idemo lijevo ili desno
			if (key = 133) {
				if ((snake.getDirection() = 3) | (snake.getDirection() = 4)) {	do snake.setNewDirection(2);	}
			}

			// LEFT strelica, validna ako idemo gore ili dolje
			if (key = 130) {
				if ((snake.getDirection() = 1) | (snake.getDirection() = 2)) {	do snake.setNewDirection(3);	}
			}

			// RIGHT strelica, validna ako idemo gore ili dolje
			if (key = 132) {
				if ((snake.getDirection() = 1) | (snake.getDirection() = 2)) {	do snake.setNewDirection(4);	}
			}

			do snake.move();

			if (snake.gameOver()) {
				let exit = true;
				do Sys.wait(500);
				do Screen.clearScreen();
				do showStatus();

				do Output.moveCursor(12,26);
				let s = "GAME OVER";
				do Output.printString(s);
				do s.dispose();

				do Output.moveCursor(14,19);
				let s = "Press Q to quit the game";
				do Output.printString(s);
				do s.dispose();
			}
				
			if (~snake.gameOver()) { do snake.draw_Set_Move();	}

			if (snake.eatFood()) {
				do setScore();
				do setLevel();
				do setSpeed();
				do showStatus();
				do snake.placeFood();
				do food.createFood();
			}
				
			if (key = 80) {	
				let paused = true;
				do Sys.wait(100);
			}
			do Sys.wait(speed);
		}

		while(~newExit) {
			let key = Keyboard.keyPressed();
			if (key = 81) {
				// q
				let newExit = true;
			}
		}
		return;
	}


	// ispisivanje stanja igre
	method void showStatus() {		
		var String s;

        	do Output.moveCursor(22, 5);
        	let s = "LEVEL: ";
        	do Output.printString(s);
        	do s.dispose();
        	do Output.printInt(level);

        	do Output.moveCursor(22, 27);
        	let s = "SCORE: ";
        	do Output.printString(s);
        	do s.dispose();
        	do Output.printInt(score);

        	do Output.moveCursor(22, 49);
        	let s = "LENGTH: ";
        	do Output.printString(s);
        	do s.dispose();
        	do Output.printInt(snake.getLength());
        	return;
	}

	// setter metode
	method void setSpeed() {
		let speed = 90 - (15 * (level - 1));
		return;
	}

	method void setLevel() {
		if ((smodulo(snake.getLength(), 10) = 0) | (smodulo(snake.getLength(), 10) = 5)) {
			if (level < 5) {	let level = level + 1;	}
		}
		return;
	}

	method void setScore() {
		let score = score + (level * 10);
		return;
	}

	// pomocna modulo funkcija
	method int smodulo(int x, int y) {
		var int d, r;
		let d = x / y;
		let r = x - (d * y);
		return r;
	}
}
